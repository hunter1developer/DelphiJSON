unit TestTestuMainClasses;
{
  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.
}

interface

uses
  TestFramework, System.Generics.Collections, uMainClasses, System.SysUtils,
  Dialogs;

type
  // Test methods for class TDriverList

  TestTDriverList = class(TTestCase)
  strict private
    FDriverList: TDriverList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure testLoadFromJSON;
    procedure testSaveToJSON;
  end;
  // Test methods for class TAutoList

  TestTAutoList = class(TTestCase)
  strict private
    FAutoList: TAutoList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromJSON;
    procedure testSaveToJSON;
  end;

  TestTTripList = class(TTestCase)
  strict private
    FTripList: TTripList;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestLoadFromJSON;
    procedure testSaveToJSON;
  end;

implementation

procedure TestTDriverList.SetUp;
var
  openDialog: TOpenDialog;
begin
  openDialog := TOpenDialog.Create(nil);
  openDialog.Filter := 'Driver JSON files (driver.json)|driver.json';
  try
    if openDialog.Execute then
      FDriverList := TDriverList.Create(openDialog.FileName);
  finally
    FreeAndNIl(openDialog);
  end;
end;

procedure TestTDriverList.TearDown;
begin
  FDriverList.Free;
  FDriverList := nil;
end;

procedure TestTDriverList.testLoadFromJSON;
begin
  // implement this method
  //FDriverList.loadFromJSON
  FDriverList.Clear;
  FDriverList.loadFromJson;
  Check(FDriverList.Count = 3);

  Check(FDriverList[0].Name = 'Frank Martin');
  Check(FDriverList[0].Phone = '555-0100');

  Check(FDriverList[1].Name = 'Travis Bickle');
  Check(FDriverList[1].Phone = '555-0222');

  Check(FDriverList[2].Name = 'Daniel Moralex');
  Check(FDriverList[2].Phone = '555-0130');
end;


procedure TestTDriverList.testSaveToJSON;
begin
  FDriverList.Clear;

  FDriverList.Add(FDriverList.CreateDriver(1, 'Frank Martin', '555-0100'));
  FDriverList.Add(FDriverList.CreateDriver(2, 'Travis Bickle', '555-0123'));
  FDriverList.Add(FDriverList.CreateDriver(3, 'Daniel Moralex', '555-0130'));

  Check(FDriverList.Count = 3);

  Check(FDriverList[0].Name = 'Frank Martin');
  Check(FDriverList[0].Phone = '555-0100');

  Check(FDriverList[1].Name = 'Travis Bickle');
  Check(FDriverList[1].Phone = '555-0123');

  Check(FDriverList[2].Name = 'Daniel Moralex');
  Check(FDriverList[2].Phone = '555-0130');

end;

procedure TestTAutoList.SetUp;
var
  openDialog: TOpenDialog;
begin
  openDialog := TOpenDialog.Create(nil);
  openDialog.Filter := 'Auto JSON files (auto.json)|auto.json';
  try
    if openDialog.Execute then
      FAutoList := TAutoList.Create(openDialog.FileName);
  finally
    FreeAndNIl(openDialog);
  end;
end;

procedure TestTAutoList.TearDown;
begin
  FAutoList.Free;
  FAutoList := nil;
end;

procedure TestTAutoList.TestLoadFromJSON;
begin
  // implement this method
  FAutoList.Clear;
  FAutoList.loadFromJSON;

  Check(FAutoList.Count = 3);

  Check(FAutoList[0].Brand = 'Peugeot');
  Check(FAutoList[0].Model = '406');
  Check(FAutoList[0].Color = 'White');

  Check(FAutoList[1].Brand = 'BMW');
  Check(FAutoList[1].Model = '735i');
  Check(FAutoList[1].Color = 'Brown');
  Check(FAutoList[1].Number = '930UHV06');

  Check(FAutoList[2].Brand = 'Checker Taxi');
  Check(FAutoList[2].Color = 'Yellow');

end;

procedure TestTAutoList.testSaveToJSON;
begin
  FAutoList.Clear;

  FAutoList.Add(FAutoList.CreateAuto(1, 'Peugeot', 'White', '406', EmptyStr));
  FAutoList.Add(FAutoList.CreateAuto(2, 'BMW', 'Brown', '735i', '930UHV06'));
  FAutoList.Add(FAutoList.CreateAuto(3, 'Checker Taxi', 'Yellow', EmptyStr, EmptyStr));

  Check(FAutoList.Count = 3);

  Check(FAutoList[0].Brand = 'Peugeot');
  Check(FAutoList[0].Model = '406');
  Check(FAutoList[0].Color = 'White');

  Check(FAutoList[1].Brand = 'BMW');
  Check(FAutoList[1].Model = '735i');
  Check(FAutoList[1].Color = 'Brown');
  Check(FAutoList[1].Number = '930UHV06');

  Check(FAutoList[2].Brand = 'Checker Taxi');
  Check(FAutoList[2].Color = 'Yellow');
end;

{ TestTTripList }

procedure TestTTripList.SetUp;
var
  openDialog: TOpenDialog;
begin
  openDialog := TOpenDialog.Create(nil);
  openDialog.Filter := 'Trip JSON files (trip.json)|trip.json';
  try
    if openDialog.Execute then
      FTripList := TTripList.Create(openDialog.FileName);
  finally
    FreeAndNIl(openDialog);
  end;
end;

procedure TestTTripList.TearDown;
begin
  FTripList.Free;
  FTripList := nil;
end;

procedure TestTTripList.TestLoadFromJSON;
begin
  FTripList.Clear;
  FTripList.loadFromJson;
  Check(FTripList.Count = 3);

  Check(FTripList[0].AutoID    = 1);
  Check(FTripList[0].DriverID  = 2);
  Check(FTripList[0].StartTime = StrToDateTime('18.6.2021 01:02:03'));

  Check(FTripList[1].AutoID    = 3);
  Check(FTripList[1].DriverID  = 4);
  Check(FTripList[1].StartTime = StrToDateTime('18.6.2021 01:02:03'));

  Check(FTripList[2].AutoID    = 5);
  Check(FTripList[2].DriverID  = 6);
  Check(FTripList[2].StartTime = StrToDateTime('18.6.2021 01:02:03'));
end;

//    function CreateTrip(const AutoID, DriverID: Integer; const StartTime: TDateTime): TTrip;
procedure TestTTripList.testSaveToJSON;
begin
  FTripList.Clear;
  FTripList.Add(FTripList.CreateTrip(1, 2, StrToDateTime('18.6.2021 01:02:03')));
  FTripList.Add(FTripList.CreateTrip(3, 4, StrToDateTime('18.6.2021 01:02:03')));
  FTripList.Add(FTripList.CreateTrip(5, 6, StrToDateTime('18.6.2021 01:02:03')));

  Check(FTripList.Count = 3);

  Check(FTripList[0].AutoID    = 1);
  Check(FTripList[0].DriverID  = 2);
  Check(FTripList[0].StartTime = StrToDateTime('18.6.2021 01:02:03'));

  Check(FTripList[1].AutoID    = 3);
  Check(FTripList[1].DriverID  = 4);
  Check(FTripList[1].StartTime = StrToDateTime('18.6.2021 01:02:03'));

  Check(FTripList[2].AutoID    = 5);
  Check(FTripList[2].DriverID  = 6);
  Check(FTripList[2].StartTime = StrToDateTime('18.6.2021 01:02:03'));
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTDriverList.Suite);
  RegisterTest(TestTAutoList.Suite);
  RegisterTest(TestTTripList.Suite);
end.
